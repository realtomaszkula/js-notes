

 ☐ how to you write html tag for users without js?

 ☐ what primitive types are in js? (string, number, boolean)

 ☐ what type is null? (js treats it as empty object)
 ☐ what type is NaN?
 ☐ what type is undefined?
 ☐ what type is [] in js?
 ☐ what type is function () {} in js



 ☐ whats the difference between function declaration and expression when it comes to global scope?


 ☐ type loop with label

 ☐ what are possible js variable names? ( $, _ or letter )


 HOISTING

 ☐ what shows in the console? (ref err)
     console.log(productID)

 ☐ what shows in the console? (undefined)
     console.log(productID);
     var productID = '9000'

 ☐ what shows in the console? (NaN -> anytime num is undefined it shows NaN)
   var total = price * qt
   var price = 3.00;
   var quantity = 5;



 ☐ what shows in the console? ('hell0')
   helloWorld()

   function helloWorld() {
     console.log('hellO!')
   }

   ☐ what shows in the console? ( type error )
   helloWorld()

   let helloWorld = function() {
     console.log('hell0!')
   }

   ☐ what shows in the console?

   console.log( 3.2e4 )
   console.log( 3.2e-4)


   NUMBERS

   ☐ how to test if number is NaN? ( isNan() )

   STRINGS

   ☐ what shows in the console? (strings are immutable!)

   let str = '   Test   '
   str.trim()

   console.log( '[' + str + ']')


   BOOLEAN

   ☐ what shows in the console?
   console.log( Boolean(0))


   If you want to wipe out variable assign it to null
   js engine assigns undefined to all variables
   so this way you know you meant it

   ☐ what shows in the console?
   console.log(undefined == null)
     => true

   // different types but js treats them as equal

   console.log(undefined === null)
     => false


     Global scrope

     ☐ what holds the global scope? all items not defined inside functions

     ☐ what shows in the console?
      console.log(this === window)


   Operators

   ☐ what function should u use on results of floating poits  operations?
   ☐ what property of obj js  engine looks for in an obj if you try to use it as a number?

     var obj = {
       valueOf: function() { return 100; }
     }

     console.log( 300 - obj )
       => 200



   ADDITION
   rules:
     * js engine will always try to convert to string if eny of the operands is a string
     * null is treated as a zero in addition
     * impossible addition results in NaN


   ☐ '200' + 10
     => '20010'
   ☐ "PRD" + 2000
     => PRD2000
   ☐ "PRD" + undefined
     => PRDundefined
   ☐ "PRD" + null
     => PRDnull
   ☐  "PRD" + NaN
     => PRDNaN

   ☐ 2000 + undefined
     => NaN
   ☐ 2000 + NaN
     => NaN
   ☐ 2000 + nulll
     => 2000

     SUBTRACTION
     rules:
       * string will be converted to numbers if possible
       * null and "" are treated as zero
       * impossible subtruction results in NaN

     ☐ "300" - "200"
       => 100
     ☐ 300 - ""
       => 300
     ☐ 300 - null
       => 300

     ☐ 'PRD' - 'Item'
       => NaN
     ☐ 300 - undefined
       => NaN
     ☐ 300 - NaN
       => NaN

     Multiplication

     ☐ 20 * undefined
       => NaN
     ☐ 20 * null
       => 0
     ☐ 4 * 'XAQ'
       => NaN
     ☐ 9 * '3'
       => 27

    Division
    rules:
      * strings will be converted to numbers if possible
      * dividing by zero gives Infinity or -Infinity
      * engine will try to convert strings to numbers
    ☐ 9 / '3'

      => 3
    ☐ 9 / 0
      => Infinity
    ☐ -9 / 0
      => -Infinity


    Modulus

    9 % 4
      => 1
    9 % '4'
      => 1
    9 % '     4     '
      => 1


    UNARY OPERATORS

    ☐ what shows in the console?
    let level = 5
    let nextLevel = level++;

    console.log(nextLevel)
      => 5

    ☐ what shows in the console?
    let level = 5
    let nextLevel = ++level;

    console.log(nextLevel)
      => 6

    ☐ what shows in the console?
    let level = 5
    let base = 10;
    let nextLevel = level-- * base;

    console.log(nextLevel)
      => 50

    ☐ what shows in the console?
    let level = 5
    let base = 10;
    let nextLevel = --level * base;

    console.log(nextLevel)
      => 40

     ☐ what shows in the console?
     let level;

     console.log(++level)
       => NaN

     ☐ what shows in the console?
     let level = null;

     console.log(++level)
       => 1

     ☐ what shows in the console?
     let value = -9;
     value = +value
     console.log(value)
       => -9

    ☐ what shows in the console?
    let value = -9;
    value = -value
    console.log(value)
      => 9

    // use - to flip the sign, + does nothing, won't turn negative to positive


    BOOLEAN OPERATORS

      &&
      rules:
        * if the first operand is an object the second operand is always going to be returned
        * if the first operand evaluates as a boolean true the second operand is always going to be returned
        * if either one of operands is null, null is returned
        * if either one of operands is undefined, undefined is returned
        * if either one of operands is NaN, NaN is returned

        ☐ what shows in the console
        let obj = {
          calc: 'logical'
        }

        let value = obj && 98
        console.log(value)
          => 98


        ☐ what shows in the console
        let obj = {
          calc: 'logical'
        }

        let value = true && obj
        console.log(value)
          => 98


        ☐ what shows in the console
        let value = null && 99
        console.log(value)
          => null

        ☐ what shows in the console
        let value = 'z' && null
        console.log(value)
          => null



        ☐ what shows in the console
        let value = 'z' && undefined
        console.log(value)
          => undefined

        ☐ what shows in the console
        let value = 'z' && NaN
        console.log(value)
          => undefined


        ☐ what shows in the console
        var value = false && productId;
        console.log(value)

        // normally you get an error, but runtime engine ignores right side if left side is false


     ||
     rules:
       * if the first operand is an object that object gets returned

       ☐ what shows in the console?
       let obj = {
         calc: 'logical'
       }

       let value = obj || 98
       console.log(value)
         => Object

      ☐ what shows in the console?
      let defaultSettings = {
        who: default;
      }

      let userSettings = {
        who: default;
      }

      let value = userSettings || defaultSettings;
      console.log(value)
        => Object { who: "user" }


      ☐ what shows in the console?
      let defaultSettings = {
        who: default;
      }

      let userSettings;

      let value = userSettings || defaultSettings;
      console.log(value)
        => Object { who: "default" }



    EQUALITY OPERATORS    ==, !==

    rules:
      * 1 will get converted to true
      * 0 will get converted to false
      * strings will try to convert to numbers
      * objects in numeric context
            => check valueOf property
            => check toString property
      * identical objects have different places in the memory so they're not eq
      * comparing undefined to anything other than null returns false
      * comparing null to anything other than undefined returns false
      * NaN == NaN returns false, NaN is actually a number in numeric context

      ex:
      console.log( true == 1)
        => true
      console.log (true == 2)
        => false
      console.log( false == 0 )
        => true

    ex:
      console.log( 42 == '42')
        => true

    ex:
      let obj = {
        valueOf: function (){ return 42;}
      }
      console.log(42 == obj)
        => true


      let obj = {
        toString: function (){ return 42;}
      }
      console.log(42 == obj)
        => true

   ex:
     let obj = {
       name: 'Trigger'
     }
     let obj2 = {
       name: 'Trigger'
     }

     console.log(obj == obj2)
       => false
    ex:
      console.log(null == undefined)
        => true

      console.log(0 == undefined)
        => false
    ex:
      console.log(null == 0)
        => false

    ex:
      console.log(NaN == NaN)


   EQUALITY OPERATORS    ===, !===


   ex:
   console.log( null === undefined)
   console.log( false === 0)
   console.log( '55' === 55)
   => false


   < > <= >=

   rules:
     * with strings checks ASCI values
     * upper case values come before lower case values (so they are lower)
     * when comparing string and number will try to convert string to number
     * when both operands are string there is no numberic conversion
     * comparing NaN to number always returns false

  ex:
    console.log("alpha" < "beta")
     => true

    console.log("Beta" < "alpha")
      => true

    console.log( '42' < 144)
      => true

    console.log( '42' < '144')
      => false


    MISC OPERATORS
    https://developer.mozilla.org/pl/docs/Web/JavaScript/Referencje/Operatory/Pierwsze%C5%84stwo_operator%C3%B3w

    var total = 6;
    total *= 4 + 1

    console.log(total)
      => 30